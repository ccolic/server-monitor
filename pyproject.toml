[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "server-monitor"
version = "1.0.0"
description = "A flexible monitoring daemon for servers and websites"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Christian Colic", email = "christian@colic.io"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.8"
dependencies = [
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "pyyaml>=6.0.1",
    "aiohttp>=3.9.0",
    "aiosmtplib>=3.0.0",
    "asyncpg>=0.29.0",
    "aiosqlite>=0.19.0",
    "cryptography>=41.0.0",
    "click>=8.1.7",
    "structlog>=23.2.0",
    "rich>=13.7.0",
    "httpx>=0.26.0",
    "prometheus-client>=0.19.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.1.9",
    "mypy>=1.8.0",
    "pre-commit>=3.8.0,<3.9.0; python_version < '3.9'",
    "pre-commit>=3.6.0; python_version >= '3.9'",
    "asyncpg-stubs>=0.30.1",
    "types-PyYAML>=6.0.12"
]
legacy = [
    "eval_type_backport; python_version < '3.10'"
]

[project.scripts]
server-monitor = "server_monitor.cli:main"

[project.urls]
Homepage = "https://github.com/ccolic/server-monitor"
Repository = "https://github.com/ccolic/server-monitor"
"Bug Tracker" = "https://github.com/ccolic/server-monitor/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/server_monitor"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
